// generateToken.js
import fs from 'fs';
import axios from 'axios';
import dotenv from 'dotenv'; 

dotenv.config();

const API_URL = process.env.VITE_API_URL || 'http://localhost:8000/api/v1';

async function tryLogin(email, passwords) {
  for (const password of passwords) {
    console.log(`üîë –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É –∑ –ø–∞—Ä–æ–ª–µ–º: ${password}`);
    
    try {
      const sessionRes = await axios.post(`${API_URL}/sessions`, {
        email: email,
        password: password
      });
      
      if (sessionRes.data.status !== 0 || sessionRes.data.token) {
        console.log('–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!');
        return { success: true, data: sessionRes.data, password: password };
      } else {
        console.log('–ù–µ–≤–¥–∞–ª–∏–π –≤—Ö—ñ–¥ (status: 0)');
      }
    } catch (err) {
      console.log('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', err.response?.data?.error?.code || err.message);
    }
  }
  
  return { success: false };
}

async function createNewUser(userData) {
  try {
    const createRes = await axios.post(`${API_URL}/users`, userData);

    if (createRes.data.status === 0 && createRes.data.error) {
      console.log('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:', createRes.data.error);
      return false;
    } else {
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!');
      return true;
    }
  } catch (err) {
    console.log('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:', err.response?.data || err.message);
    return false;
  }
}

async function run() {
  try {
    console.log('=== –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–• ===');
    const email = process.env.VITE_USER_EMAIL;
    const password = process.env.VITE_USER_PASSWORD;
    
    console.log('API_URL:', API_URL);
    console.log('Email:', email);
    
    if (!email || !password) {
      throw new Error('Email –∞–±–æ –ø–∞—Ä–æ–ª—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ');
    }

    console.log('\n=== –°–ü–†–û–ë–ê –í–•–û–î–£ –ü–Ü–î –Ü–°–ù–£–Æ–ß–û–ì–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');
    const possiblePasswords = [
      password,           
      'password1111',     
      'super-password',   
      'pasword1111',      
    ];
    
    let loginResult = await tryLogin(email, possiblePasswords);
    
    if (!loginResult.success) {
      console.log('\n=== –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–ì–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');
      
      const timestamp = Date.now();
      const newEmail = `test${timestamp}@gmail.com`;
      const newPassword = 'password1111';
      
      console.log(`–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${newEmail}`);
      
      const newUser = {
        email: newEmail,
        name: 'Test User',
        password: newPassword,
        confirmPassword: newPassword,
      };
      
      const userCreated = await createNewUser(newUser);
      
      if (userCreated) {
        console.log('–°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É –ø—ñ–¥ –Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º...');
        loginResult = await tryLogin(newEmail, [newPassword]);
        
        if (loginResult.success) {
          console.log('–û–Ω–æ–≤–ª—é—î–º–æ .env —Ñ–∞–π–ª –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
          const envPath = '.env';
          let env = fs.readFileSync(envPath, 'utf-8');
          env = env.replace(/VITE_USER_EMAIL=.*/g, `VITE_USER_EMAIL=${newEmail}`);
          env = env.replace(/VITE_USER_PASSWORD=.*/g, `VITE_USER_PASSWORD=${newPassword}`);
          fs.writeFileSync(envPath, env);
        }
      }
    }

    if (!loginResult.success) {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏ –∂–æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
    }

    console.log('\n=== –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–ê ===');
    const responseData = loginResult.data;
    console.log('–î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', JSON.stringify(responseData, null, 2));
    
    const token = responseData.token || 
                  responseData.data?.token || 
                  responseData.accessToken ||
                  responseData.authToken;

    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    console.log('–¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ:', token.substring(0, 20) + '...');

    const envPath = '.env';
    const env = fs.readFileSync(envPath, 'utf-8');
    const updated = env.replace(/VITE_AUTH_TOKEN=.*/g, '') + `\nVITE_AUTH_TOKEN=${token}\n`;
    fs.writeFileSync(envPath, updated.trim() + '\n');
    
    console.log('\n–£–°–ü–Ü–•!');
    console.log('–¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ .env —Ñ–∞–π–ª');
    console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è –ø–∞—Ä–æ–ª—å:', loginResult.password);

  } catch (err) {
    console.log('\n–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', err.message);
    process.exit(1);
  }
}

run();